{"ast":null,"code":"// src/services/api.js\n\nimport axios from 'axios';\nconst api = axios.create({\n  baseURL: 'http://localhost:8080'\n});\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('jwtToken');\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\napi.interceptors.response.use(response => response, async error => {\n  const originalRequest = error.config;\n  if (error.response.status === 401 && !originalRequest._retry) {\n    originalRequest._retry = true;\n    try {\n      const refreshToken = localStorage.getItem('refreshToken');\n      const response = await axios.post('/refresh-token', {\n        refreshToken\n      });\n      const {\n        token\n      } = response.data;\n      localStorage.setItem('jwtToken', token);\n      api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n      return api(originalRequest);\n    } catch (refreshError) {\n      // Handle refresh token error (e.g., redirect to login)\n      return Promise.reject(refreshError);\n    }\n  }\n  return Promise.reject(error);\n});\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","interceptors","request","use","config","token","localStorage","getItem","headers","error","Promise","reject","response","originalRequest","status","_retry","refreshToken","post","data","setItem","defaults","common","refreshError"],"sources":["/Users/anusharesu/Desktop/Nani_Bitbucket/Go/Projects/timesheet-app-react/src/services/api.js"],"sourcesContent":["// src/services/api.js\n\nimport axios from 'axios';\n\nconst api = axios.create({\n  baseURL: 'http://localhost:8080'\n});\n\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('jwtToken');\n    if (token) {\n      config.headers['Authorization'] = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\napi.interceptors.response.use(\n  (response) => response,\n  async (error) => {\n    const originalRequest = error.config;\n    if (error.response.status === 401 && !originalRequest._retry) {\n      originalRequest._retry = true;\n      try {\n        const refreshToken = localStorage.getItem('refreshToken');\n        const response = await axios.post('/refresh-token', { refreshToken });\n        const { token } = response.data;\n        localStorage.setItem('jwtToken', token);\n        api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n        return api(originalRequest);\n      } catch (refreshError) {\n        // Handle refresh token error (e.g., redirect to login)\n        return Promise.reject(refreshError);\n      }\n    }\n    return Promise.reject(error);\n  }\n);\n\nexport default api;"],"mappings":"AAAA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACvBC,OAAO,EAAE;AACX,CAAC,CAAC;AAEFF,GAAG,CAACG,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;EAC9C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACI,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUH,KAAK,EAAE;EACrD;EACA,OAAOD,MAAM;AACf,CAAC,EACAK,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAEDX,GAAG,CAACG,YAAY,CAACW,QAAQ,CAACT,GAAG,CAC1BS,QAAQ,IAAKA,QAAQ,EACtB,MAAOH,KAAK,IAAK;EACf,MAAMI,eAAe,GAAGJ,KAAK,CAACL,MAAM;EACpC,IAAIK,KAAK,CAACG,QAAQ,CAACE,MAAM,KAAK,GAAG,IAAI,CAACD,eAAe,CAACE,MAAM,EAAE;IAC5DF,eAAe,CAACE,MAAM,GAAG,IAAI;IAC7B,IAAI;MACF,MAAMC,YAAY,GAAGV,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;MACzD,MAAMK,QAAQ,GAAG,MAAMf,KAAK,CAACoB,IAAI,CAAC,gBAAgB,EAAE;QAAED;MAAa,CAAC,CAAC;MACrE,MAAM;QAAEX;MAAM,CAAC,GAAGO,QAAQ,CAACM,IAAI;MAC/BZ,YAAY,CAACa,OAAO,CAAC,UAAU,EAAEd,KAAK,CAAC;MACvCP,GAAG,CAACsB,QAAQ,CAACZ,OAAO,CAACa,MAAM,CAAC,eAAe,CAAC,GAAG,UAAUhB,KAAK,EAAE;MAChE,OAAOP,GAAG,CAACe,eAAe,CAAC;IAC7B,CAAC,CAAC,OAAOS,YAAY,EAAE;MACrB;MACA,OAAOZ,OAAO,CAACC,MAAM,CAACW,YAAY,CAAC;IACrC;EACF;EACA,OAAOZ,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAeX,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}